<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/web3/3.0.0-rc.5/web3.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    
    <title>OnChain Monkeys</title>

</head>
<body>
    <style>
        .meta-gray {
            -webkit-filter: grayscale(1);
        }
        .meta-normal {
            -webkit-filter: grayscale(0);
        }
    </style>
    
    <div class="container">
	    <div>
	    <img src="OnChainMonkey9.png" alt="OnChain Monkey #9" style="width:200px">
	    <img src="OnChainMonkey12.png" alt="OnChain Monkey #12" style="width:200px">
	    <img src="OnChainMonkey18.png" alt="OnChain Monkey #18" style="width:200px">
	    </div>
        <div style="margin-top: 30px;" class="row text-center">
            <div class="col-md-12">
                <h2>OnChain Monkey</h2>
		<a href="https://opensea.io/collection/onchainmonkey">On OpenSea</a><br/>
		<a href="https://discord.gg/SfX2umvcfA">Discord</a>
		<br/>
Update: I want to do a shoutout to more projects that inspired this one. I'm sorry if I offended by leaving them out before, and I'm sure I'll offend again by leaving others out. Cryptopunks, AvaStars, Art Blocks, BAYC, LOOT for starters.
		<br/>
		<br/><b>All OnChain Monkeys have been claimed, please see them on OpenSea.</b><br/>
		<b>Thanks very much for the support! Stay tuned for future updates.</b>
            </div>            
        </div>
        <div class="row text-center">
            <div class="col-md-12">
		    Welcome to the OnChain Monkey gang! <br/>
		    Completely on chain 10k collection with all these properties:
		    <ul style="text-align: left;">
			    <li>all metadata is on chain</li>
			    <li>all images are on chain (in svg format)</li>
			    <li>all created in a single txn</li>
			    <li>all 10,000 OnChain Monkeys are unique</li>
			    <li>there are 7 traits with 171 values</li>
			    <li>the traits have distribution and rarities based on BAYC and being on chain, these can be used in other apps and collections in the future</li>
			    <li>the individual traits for the OnChain Monkeys is inspired by BAYC. For example, the 8 background colors are the same 8 as BAYC apes. The 19 two tone fur colors are taken from the 19 BAYC ape furs and have a direct 1-1 mapping. The 6 earring types are similar to the BAYC apes.</li>
		    </ul>
This project was a lot of fun to do, and I hope people get a kick out of it! Let's monkey around on chain! Free to claim below!
If you feel like donating, find me at huuep.eth or <a href="https://twitter.com/huuep">twitter</a><br/>
<br/>
Thanks to Cryptopunks, BAYC, and LOOT for the inspiration. They innovated and brought us great stuff!
These are the differences of past projects compared to this one:
<ul style="text-align: left;">
	<li>Cryptopunks were not completely on chain originally, and took many txns to load all the data on chain</li>
	<li>BAYC was not completely on chain, and not sure the current status, and would take many txns to load on chain</li>
	<li>LOOT was on chain in single txn, but no profile photos, and unsure if the whole collection was unique or not</li>
</ul>
Thanks again and hope people have fun with this!
<br/>
Tips for collectors - the Monkeys with the gold fur are the most rare! As are some other traits for you to figure out (like diamond earrings)! :)
            </div>
        </div>
        <div class="row text-center">
            <div class="col-md-12">
		    <b>All OnChain Monkeys have been claimed! Please visit OpenSea to find them for sale.</b>
            </div>
        </div>
        <section class="contract-section hidden">
            <div style="margin-top: 30px;" class="row text-center">
            </div>
            <div class="row text-center">
            </div>
            <div class="row text-center">
            </div>
        </section>
    </div>  
    <script>
        let currentAccount = null;
        let web3;
        let abi = [
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "approved",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "Approval",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "bool",
				"name": "approved",
				"type": "bool"
			}
		],
		"name": "ApprovalForAll",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "previousOwner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "OwnershipTransferred",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "approve",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "claim",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "getApproved",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "getAttributes",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			}
		],
		"name": "isApprovedForAll",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "maxSupply",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "name",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "numClaimed",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "ownerClaim",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "ownerOf",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "renounceOwnership",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "safeTransferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			},
			{
				"internalType": "bytes",
				"name": "_data",
				"type": "bytes"
			}
		],
		"name": "safeTransferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"internalType": "bool",
				"name": "approved",
				"type": "bool"
			}
		],
		"name": "setApprovalForAll",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "bytes4",
				"name": "interfaceId",
				"type": "bytes4"
			}
		],
		"name": "supportsInterface",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "symbol",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "tokenByIndex",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "tokenOfOwnerByIndex",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "tokenURI",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalSupply",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "transferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "transferOwnership",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
];
        let contactAddress = '0x960b7a6bcd451c9968473f7bbfd9be826efd549a'
	let numClaimed = 0
        
        function handleAccountsChanged(accounts) {
            console.log('Calling HandleChanged')
            
            if (accounts.length === 0) {
                console.log('Please connect to MetaMask.');
                $('#enableMetamask').html('Connect with Metamask')
            } else if (accounts[0] !== currentAccount) {
                currentAccount = accounts[0];
                $('#enableMetamask').html(currentAccount)
                $('#status').html('')
                
                if(currentAccount != null) {
                    // Set the button label
                    $('#enableMetamask').html("MetaMask Connected")
		    $('#setValue').attr('disabled',false)
                }
            }
            console.log('WalletAddress in HandleAccountChanged ='+currentAccount)
        }

        function connect() {
            console.log('Calling connect()')
            ethereum
            .request({ method: 'eth_requestAccounts' })
            .then(handleAccountsChanged)
            .catch((err) => {
            if (err.code === 4001) {
                // EIP-1193 userRejectedRequest error
                // If this happens, the user rejected the connection request.
                console.log('Please connect to MetaMask.');
                $('#status').html('Not connected to Metamask')
            } else {
                console.error(err);
            }
            });
        }

        function detectMetaMask() {
            if (typeof window.ethereum !== 'undefined') {                
                return true
            } else {                
                return false
            }
        }

        async function getValue() {
            console.log('GetValue')
            const contractFirst = new web3.eth.Contract(
                        abi,
                        contactAddress
            );

            contractFirst.methods.numClaimed().call().then(function (result) {                
		    numClaimed = result
		    console.log(numClaimed)
                $('#getValue').html(result)
            //});
            contractFirst.methods.tokenURI(numClaimed).call().then(function (result2) {
		    console.log('here')
		    console.log(numClaimed)
                $('#tokenURI').html(result2)
		$('#monkey_json').html(atob(result2.substring(29)))
		const obj = JSON.parse(atob(result2.substring(29)))
		let img_string = obj.image.substring(26)
		$('#monkey_img').html(atob(img_string))
            });
	});
        }

        async function setValue() {
            console.log('claim')
            const contractFirst = new web3.eth.Contract(
                        abi,
                        contactAddress
            );
	    console.log(currentAccount)
            contractFirst.methods.claim().send({from:currentAccount}).then(function (result) {
                console.log(result);
                $('#getValue').html(input_value)
            });
            
        }
    </script>
    <script>   
        $( document ).ready(function() {
            m = detectMetaMask()
            if(m) {
                $('#metaicon').removeClass('meta-gray')
                $('#metaicon').addClass('meta-normal')
                $('#enableMetamask').attr('disabled',false)
                $('#setValue').attr('disabled',true)
                //connect() // Make sure the connected wallet is being returned
            } else {
                $('#enableMetamask').attr('disabled',true)
                $('#metaicon').removeClass('meta-normal')
                $('#metaicon').addClass('meta-gray')
		$('#setValue').attr('disabled',false)
            }

            $('#enableMetamask').click(function() {
                connect()
            });

            $('#setValue').click(function() {
                setValue()
            });
            

            try {            
		web3 = new Web3(window.ethereum);

            } catch (error) {
                alert(error)
            }            
            
            //Fetch Value from Smart Contract
            getValue()
        })
    </script>  
</body>
</html>
